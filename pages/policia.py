
import streamlit as st
import pandas as pd
from io import BytesIO
from reportlab.lib.pagesizes import A4
from reportlab.pdfgen import canvas
import base64
import streamlit as st
from reportlab.lib.pagesizes import A4
from reportlab.pdfgen import canvas
from io import BytesIO
from datetime import datetime 
import plotly.express as px
from database.conexao import carregar_dados

st.set_page_config(page_title="An√°lise Criminal Interativa", layout="wide")
st.title("üëÆ‚Äç‚ôÄÔ∏è Dashboard de Seguran√ßa P√∫blica")

# 1. Carregar dados
df = carregar_dados()

# 2. Filtro de ano
anos_disponiveis = sorted(df['ano_estatistica'].dropna().unique())
anos_selecionados = st.multiselect("Selecione o(s) ano(s) para an√°lise:", anos_disponiveis, default=anos_disponiveis)

df = df[df['ano_estatistica'].isin(anos_selecionados)]
if df.empty:
    st.warning("‚ö†Ô∏è Nenhum dado encontrado para os anos selecionados.")
    st.stop()

# 3. Indicadores r√°pidos
total = len(df)
bairro_top = df['bairro'].value_counts().idxmax()
tipo_top = df['natureza_apurada'].value_counts().idxmax()

st.markdown("### üìå Indicadores Gerais")
col1, col2, col3 = st.columns(3)
col1.metric("Total de Ocorr√™ncias", total)
col2.metric("Bairro com Mais Casos", bairro_top)
col3.metric("Natureza Mais Comum", tipo_top)

# 4. Tend√™ncia Mensal de Crimes
st.subheader("üìà Tend√™ncia Mensal de Crimes")
tendencia = df.groupby(['ano_estatistica', 'mes_estatistica']).size().reset_index(name='total_crimes')
tendencia['data'] = pd.to_datetime(tendencia['ano_estatistica'].astype(str) + '-' + tendencia['mes_estatistica'].astype(str) + '-01')

fig_tendencia = px.line(tendencia, x='data', y='total_crimes', color='ano_estatistica', title="Tend√™ncia de Crimes por M√™s")
fig_tendencia.update_layout(title_x=0.5)
st.plotly_chart(fig_tendencia)

# 5. Ocorr√™ncias por Dia da Semana
st.subheader("üóïÔ∏è Ocorr√™ncias por Dia da Semana")
# Ap√≥s criar a coluna 'dia_semana'
df['dia_semana'] = pd.to_datetime(df['data_ocorrencia'], errors='coerce').dt.day_name()

# Dicion√°rio de tradu√ß√£o
traducao_dias = {
    'Monday': 'Segunda',
    'Tuesday': 'Ter√ßa',
    'Wednesday': 'Quarta',
    'Thursday': 'Quinta',
    'Friday': 'Sexta',
    'Saturday': 'S√°bado',
    'Sunday': 'Domingo'
}

# Traduzir
df['dia_semana_pt'] = df['dia_semana'].map(traducao_dias)

# Ordenar dias da semana em portugu√™s
dias_ordenados_pt = ['Segunda', 'Ter√ßa', 'Quarta', 'Quinta', 'Sexta', 'S√°bado', 'Domingo']
crimes_por_dia = df['dia_semana_pt'].value_counts().reindex(dias_ordenados_pt).fillna(0)

# Gr√°fico
fig_dia = px.bar(x=crimes_por_dia.index, y=crimes_por_dia.values,
                 labels={'x': 'Dia da Semana', 'y': 'N√∫mero de Crimes'},
                 title="Ocorr√™ncias por Dia da Semana")
fig_dia.update_layout(title_x=0.5)
st.plotly_chart(fig_dia)



st.subheader("üìÖ Crimes Mais Comuns por Dia da Semana")

# Traduzir dias da semana
df['dia_semana'] = pd.to_datetime(df['data_ocorrencia'], errors='coerce').dt.day_name()
dias_traduzidos = {
    'Monday': 'Segunda',
    'Tuesday': 'Ter√ßa',
    'Wednesday': 'Quarta',
    'Thursday': 'Quinta',
    'Friday': 'Sexta',
    'Saturday': 'S√°bado',
    'Sunday': 'Domingo'
}
df['dia_semana_pt'] = df['dia_semana'].map(dias_traduzidos)

# Top 5 crimes mais comuns
top_crimes = df['natureza_apurada'].value_counts().head(5).index
df_top_crimes = df[df['natureza_apurada'].isin(top_crimes)]

# Agrupar por crime e dia da semana
agrupado = df_top_crimes.groupby(['natureza_apurada', 'dia_semana_pt']).size().reset_index(name='total')

# Garantir a ordem dos dias
dias_ordenados = ['Segunda', 'Ter√ßa', 'Quarta', 'Quinta', 'Sexta', 'S√°bado', 'Domingo']
agrupado['dia_semana_pt'] = pd.Categorical(agrupado['dia_semana_pt'], categories=dias_ordenados, ordered=True)
agrupado = agrupado.sort_values(by='dia_semana_pt')

# Gr√°fico de barras agrupadas
fig_crimes_dia = px.bar(
    agrupado,
    x='dia_semana_pt',
    y='total',
    color='natureza_apurada',
    labels={'dia_semana_pt': 'Dia da Semana', 'total': 'N√∫mero de Crimes', 'natureza_apurada': 'Tipo de Crime'},
    title="Crimes Mais Comuns por Dia da Semana",
    barmode='group'
)
fig_crimes_dia.update_layout(title_x=0.5)
st.plotly_chart(fig_crimes_dia)

# 9. Crimes por Tipo e Local
# 9. Crimes por Tipo e Local
st.subheader("üßê Crimes por Tipo e Local")

# Caixa para selecionar tipo de local
local_selecionado = st.selectbox("Escolha o tipo de local para an√°lise:", df['subtipo_local'].unique())

# Filtrar os dados conforme o tipo de local selecionado
df_local = df[df['subtipo_local'] == local_selecionado].groupby('natureza_apurada').size().reset_index(name='total_crimes')

# Verificar se h√° dados para o local selecionado
if df_local.empty:
    st.warning(f"‚ö†Ô∏è N√£o foram encontrados dados para o local **{local_selecionado}**.")
else:
    # Gr√°fico de barras com o total de crimes por tipo
    fig_local = px.bar(df_local, 
                       x='natureza_apurada', 
                       y='total_crimes', 
                       labels={'natureza_apurada': 'Tipo de Crime', 'total_crimes': 'Total de Crimes'}, 
                       title=f"Tipos de Crimes em {local_selecionado}",
                       color='natureza_apurada',  # Adicionando coloriza√ß√£o para tornar o gr√°fico mais din√¢mico
                       color_discrete_sequence=px.colors.qualitative.Set2)

    # Atualiza√ß√£o do layout para centralizar o t√≠tulo e ajustar o gr√°fico
    fig_local.update_layout(title_x=0.5, 
                            xaxis_title=None, 
                            yaxis_title=None, 
                            xaxis_tickangle=45)
    
    # Exibindo o gr√°fico
    st.plotly_chart(fig_local)

    # Detalhamento adicional
    st.write(f"A an√°lise dos crimes no local **{local_selecionado}** revela as seguintes informa√ß√µes:")
    st.write(df_local)



# 7. An√°lise de Bairros
st.subheader("üìç An√°lise de Bairros com Mais Ocorr√™ncias")
top_bairros = df['bairro'].value_counts().head(10)
bairro_escolhido = st.selectbox("Selecione um Bairro para an√°lise:", top_bairros.index)

# 8. Tipos de Crimes no Bairro
st.write(f"Analisando o bairro **{bairro_escolhido}**:")
df_bairro = df[df['bairro'] == bairro_escolhido]
tipos_bairro = df_bairro['natureza_apurada'].value_counts().head(10)

fig_bairro = px.bar(x=tipos_bairro.index, y=tipos_bairro.values, labels={'x': 'Tipo de Crime', 'y': 'Total de Crimes'}, title=f"Tipos de Crimes em {bairro_escolhido}")
fig_bairro.update_layout(title_x=0.5)
st.plotly_chart(fig_bairro)

# 9. Evolu√ß√£o Anual de Crimes
st.subheader("üìä Evolu√ß√£o Anual de Ocorr√™ncias")
crimes_por_ano = df.groupby('ano_estatistica').size().reset_index(name='total_crimes')

fig_ano = px.line(crimes_por_ano, x='ano_estatistica', y='total_crimes', title="Evolu√ß√£o Anual de Crimes", markers=True)
fig_ano.update_layout(title_x=0.5)
st.plotly_chart(fig_ano)

# 10. Tend√™ncias: √âpocas do Ano com Maior Criminalidade
st.subheader("Tend√™ncias: √âpocas do Ano com Maior Incid√™ncia de Criminalidade")

# Caixa para escolher crime
crime_escolhido = st.selectbox("Selecione o tipo de crime para a an√°lise sazonal:", df['natureza_apurada'].unique())

df_crime = df[df['natureza_apurada'] == crime_escolhido]
sazonalidade = df_crime.groupby('mes_estatistica').size().reset_index(name='total_crimes')
meses_nomes = {1: 'Janeiro', 2: 'Fevereiro', 3: 'Mar√ßo', 4: 'Abril', 5: 'Maio', 6: 'Junho',
               7: 'Julho', 8: 'Agosto', 9: 'Setembro', 10: 'Outubro', 11: 'Novembro', 12: 'Dezembro'}
sazonalidade['mes_nome'] = sazonalidade['mes_estatistica'].map(meses_nomes)

fig_sazonalidade = px.bar(sazonalidade, x='mes_nome', y='total_crimes', title="Incid√™ncia de Criminalidade nas √âpocas do Ano", labels={'mes_nome': 'M√™s', 'total_crimes': 'Total de Crimes'})
fig_sazonalidade.update_layout(title_x=0.5)
st.plotly_chart(fig_sazonalidade)

mes_top = sazonalidade.sort_values(by='total_crimes', ascending=False).iloc[0]
st.info(f"No m√™s de {mes_top['mes_nome']} observou-se o maior n√∫mero de crimes ({mes_top['total_crimes']} casos) para o tipo de crime: {crime_escolhido}.")


# 11. Exportar Dados para PDF
from datetime import datetime

def gerar_pdf():
    buffer = BytesIO()
    p = canvas.Canvas(buffer, pagesize=A4)
    width, height = A4

    # Captura a data de gera√ß√£o do relat√≥rio
    data_geracao = datetime.now().strftime('%d/%m/%Y %H:%M:%S')

    # Cabe√ßalho
    p.setFont("Helvetica-Bold", 16)
    p.drawString(40, height - 50, "Relat√≥rio de An√°lise Criminal")

    # Indicadores principais
    p.setFont("Helvetica", 12)
    p.drawString(40, height - 100, f"Total de Ocorr√™ncias: {total}")
    p.drawString(40, height - 120, f"Bairro com Mais Casos: {bairro_top}")
    p.drawString(40, height - 140, f"Natureza Mais Comum: {tipo_top}")
    p.drawString(40, height - 160, f"Anos Selecionados: {', '.join(map(str, anos_selecionados))}")
    p.drawString(40, height - 180, f"Local Selecionado: {local_selecionado}")
    p.drawString(40, height - 200, f"Bairro Selecionado: {bairro_escolhido}")
    p.drawString(40, height - 220, f"Crime para An√°lise Sazonal: {crime_escolhido}")
    p.drawString(40, height - 240, f"M√™s com Maior Incid√™ncia: {mes_top['mes_nome']} ({mes_top['total_crimes']} casos)")

    # Dados sobre Ocorr√™ncias por Dia da Semana
    p.setFont("Helvetica-Bold", 12)
    p.drawString(40, height - 280, "üìÖ Ocorr√™ncias por Dia da Semana:")
    
    p.setFont("Helvetica", 10)
    y_position = height - 300
    for dia, qtd in crimes_por_dia.items():
        p.drawString(40, y_position, f"{dia}: {int(qtd)} ocorr√™ncias")
        y_position -= 15

    # Garantir que o texto n√£o saia da p√°gina
    if y_position < 60:
        p.showPage()
        p.setFont("Helvetica", 10)
        y_position = height - 50

    # Footer com a data de gera√ß√£o
    p.setFont("Helvetica-Oblique", 8)
    p.drawString(40, 40, f"Relat√≥rio gerado em: {data_geracao}")

    # Salvar PDF
    p.showPage()
    p.save()
    buffer.seek(0)
    return buffer


# Bot√£o para baixar o PDF
st.subheader("üì• Exportar Dados para PDF" )
st.write("Clique no bot√£o abaixo para baixar os dados filtrados em PDF.")
pdf_bytes = gerar_pdf()
st.download_button(label="üì• Baixar PDF do Relat√≥rio",
                   data=pdf_bytes,
                   file_name="relatorio_analise_criminal.pdf",
                   mime="application/pdf")

# 12. Exportar Relat√≥rio Detalhado para PDF
def gerar_relatorio_detalhado(df, total, bairro_top, tipo_top, anos_selecionados, local_selecionado, bairro_escolhido, crime_escolhido, mes_top):
    # Criar buffer para PDF
    buffer = BytesIO()
    p = canvas.Canvas(buffer, pagesize=A4)
    width, height = A4

    # Fun√ß√£o auxiliar para adicionar texto com controle de altura e p√°ginas
    def add_text_with_page_control(text, font, size, x, y, page_height):
        nonlocal p
        p.setFont(font, size)
        if y < 40:  # Se a posi√ß√£o y for muito baixa, criamos uma nova p√°gina
            p.showPage()
            p.setFont(font, size)
            y = page_height - 50  # Reseta a altura para o topo da nova p√°gina
        p.drawString(x, y, text)
        return y - 20  # Retorna a nova altura ap√≥s o texto

    # Cabe√ßalho
    p.setFont("Helvetica-Bold", 16)
    altura = height - 50
    altura = add_text_with_page_control("Relat√≥rio Detalhado de An√°lise Criminal", "Helvetica-Bold", 16, 40, altura, height)

    # Data e hora do relat√≥rio
    data_geracao = datetime.now().strftime("%d/%m/%Y %H:%M:%S")
    altura = add_text_with_page_control(f"Data de Gera√ß√£o: {data_geracao}", "Helvetica", 10, 40, altura, height)

    # Indicadores principais
    altura = add_text_with_page_control("Indicadores Principais", "Helvetica-Bold", 12, 40, altura, height)
    altura = add_text_with_page_control(f"Total de Ocorr√™ncias: {total}", "Helvetica", 10, 40, altura, height)
    altura = add_text_with_page_control(f"Bairro com Mais Casos: {bairro_top}", "Helvetica", 10, 40, altura, height)
    altura = add_text_with_page_control(f"Natureza Mais Comum: {tipo_top}", "Helvetica", 10, 40, altura, height)
    altura = add_text_with_page_control(f"Anos Selecionados: {', '.join(map(str, anos_selecionados))}", "Helvetica", 10, 40, altura, height)
    altura = add_text_with_page_control(f"Local Selecionado: {local_selecionado}", "Helvetica", 10, 40, altura, height)
    altura = add_text_with_page_control(f"Bairro Selecionado: {bairro_escolhido}", "Helvetica", 10, 40, altura, height)
    altura = add_text_with_page_control(f"Crime para An√°lise Sazonal: {crime_escolhido}", "Helvetica", 10, 40, altura, height)
    altura = add_text_with_page_control(f"M√™s com Maior Incid√™ncia: {mes_top['mes_nome']} ({mes_top['total_crimes']} casos)", "Helvetica", 10, 40, altura, height)

    # Tend√™ncia de Crimes por M√™s
    altura = add_text_with_page_control("Tend√™ncia de Crimes por M√™s", "Helvetica-Bold", 12, 40, altura, height)
    tendencia = df.groupby(['ano_estatistica', 'mes_estatistica']).size().reset_index(name='total_crimes')
    for i, row in tendencia.iterrows():
        altura = add_text_with_page_control(f"Ano: {row['ano_estatistica']} - M√™s: {row['mes_estatistica']} - Crimes: {row['total_crimes']}", "Helvetica", 10, 40, altura, height)

    # Ocorr√™ncias por Dia da Semana
    altura = add_text_with_page_control("Ocorr√™ncias por Dia da Semana", "Helvetica-Bold", 12, 40, altura, height)
    df['dia_semana'] = pd.to_datetime(df['data_ocorrencia'], errors='coerce').dt.day_name()
    traducao_dias = {'Monday': 'Segunda', 'Tuesday': 'Ter√ßa', 'Wednesday': 'Quarta', 'Thursday': 'Quinta', 'Friday': 'Sexta', 'Saturday': 'S√°bado', 'Sunday': 'Domingo'}
    df['dia_semana_pt'] = df['dia_semana'].map(traducao_dias)
    crimes_por_dia = df['dia_semana_pt'].value_counts().reindex(['Segunda', 'Ter√ßa', 'Quarta', 'Quinta', 'Sexta', 'S√°bado', 'Domingo']).fillna(0)
    for i, (dia, qtd) in enumerate(crimes_por_dia.items()):
        altura = add_text_with_page_control(f"{dia}: {qtd} crimes", "Helvetica", 10, 40, altura, height)

    # Crimes Mais Comuns por Dia da Semana
    altura = add_text_with_page_control("Crimes Mais Comuns por Dia da Semana", "Helvetica-Bold", 12, 40, altura, height)
    top_crimes = df['natureza_apurada'].value_counts().head(5).index
    df_top_crimes = df[df['natureza_apurada'].isin(top_crimes)]
    crimes_dia = df_top_crimes.groupby(['natureza_apurada', 'dia_semana_pt']).size().reset_index(name='total')
    for i, row in crimes_dia.iterrows():
        altura = add_text_with_page_control(f"Crime: {row['natureza_apurada']} - Dia: {row['dia_semana_pt']} - Total: {row['total']}", "Helvetica", 10, 40, altura, height)

    # Detalhamento sobre o bairro escolhido
    altura = add_text_with_page_control(f"Detalhamento para o Bairro: {bairro_escolhido}", "Helvetica-Bold", 12, 40, altura, height)
    df_bairro = df[df['bairro'] == bairro_escolhido]
    tipos_bairro = df_bairro['natureza_apurada'].value_counts().head(10)
    for i, (tipo, qtd) in enumerate(tipos_bairro.items()):
        altura = add_text_with_page_control(f"{tipo}: {qtd} crimes", "Helvetica", 10, 40, altura, height)

    # Finaliza√ß√£o do relat√≥rio
    p.setFont("Helvetica-Oblique", 8)
    p.drawString(40, 40, "Este relat√≥rio foi gerado automaticamente.")

    p.showPage()
    p.save()
    buffer.seek(0)
    return buffer


# Fun√ß√£o para o bot√£o de download
def download_relatorio_detalhado():
    pdf_bytes = gerar_relatorio_detalhado(df, total, bairro_top, tipo_top, anos_selecionados, local_selecionado, bairro_escolhido, crime_escolhido, mes_top)
    st.download_button(label="üì• Baixar Relat√≥rio Detalhado",
                       data=pdf_bytes,
                       file_name="relatorio_detalhado_analise_criminal.pdf",
                       mime="application/pdf")

# Chamada para download do relat√≥rio
st.subheader("üì• Exportar Relat√≥rio Detalhado para PDF")
download_relatorio_detalhado()
